#! /usr/bin/env python
from __future__ import division

import rospy
from math import pi, asin, acos
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import Twist, PoseStamped, PoseWithCovarianceStamped
from nav_msgs.msg import Odometry, Path
from std_msgs.msg import Float32, Bool
import actionlib

from diff_drive import goal_controller
from diff_drive import stanley_steering
from diff_drive import pose
from diff_drive.msg import GoToPoseAction, GoToPoseGoal, GoToPoseResult
from diff_drive.msg import GoalPath, BoolArray

class GoToGoalNode:

    def __init__(self):
        self.controller = stanley_steering.StanleySteering()

        # This is a list of all the waypoints in the current path
        self.goal_array = []
        # This is the current waypoint index
        self.goal_index = 1

        # This is an array of completed waypoints in the path
        self.bool_array = []

        self.turning = False

    def main(self):
        rospy.init_node('diff_drive_go_to_goal')

        # Action client
        self.action_name = 'diff_drive_go_to_goal'
        self.action_server \
            = actionlib.SimpleActionServer(self.action_name, GoToPoseAction,
                                           execute_cb=self.on_execute,
                                           auto_start=False)

        self.action_client = actionlib.SimpleActionClient(
            'diff_drive_go_to_goal', GoToPoseAction)

        self.node_name = rospy.get_name()
        rospy.loginfo("{0} started".format(self.node_name))

        # Subscribers
        pose = rospy.get_param("~pose_topic", {"name":"","type":""})
        if pose["type"] == "Odometry":
            rospy.Subscriber(pose["name"], Odometry, self.on_odometry)
        elif pose["type"] == "PoseWithCovarianceStamped":
            rospy.Subscriber(pose["name"], PoseWithCovarianceStamped, self.on_odometry)
        else:
            rospy.logerr("No odometry topic with the msg type of" + pose["type"])
        
        odom = rospy.get_param("~odom_topic", "")
        rospy.Subscriber(odom, Float32, self.on_velocity)
        rospy.Subscriber('move_base_simple/goal', PoseStamped, self.on_goal)
        rospy.Subscriber('diff_drive/goal_path', GoalPath, self.on_path)

        rospy.Subscriber("/stop_diff_drive", Bool, self.on_stop)
        rospy.Subscriber("/turning", Bool, self.on_turning)
        rospy.Subscriber("/turn/cmd_vel", Float32, self.on_turn_vel)

        # Publishers
        self.goal_achieved_pub = rospy.Publisher('diff_drive/goal_achieved', Bool,
                                                 queue_size=1)
        self.path_achieved_pub = rospy.Publisher('diff_drive/path_achieved', Bool,
                                                 queue_size=10)
        self.waypoints_achieved_pub = rospy.Publisher('diff_drive/waypoints_achieved', BoolArray,
                                                 queue_size=1)
        self.dist_pub = rospy.Publisher('~distance_to_goal',
                                        Float32, queue_size=10)
        self.twist_pub = rospy.Publisher('cmd_vel',
                                         Twist, queue_size=10)

        self.path_pub = rospy.Publisher('/diff_drive/path',
                                         Path, queue_size=10)

        self.test_alpha = rospy.Publisher('test/alpha',
                                        Float32, queue_size=10)
        self.test_delta = rospy.Publisher('test/delta',
                                        Float32, queue_size=10)
        self.test_theta_vel = rospy.Publisher('test/theta_vel',
                                        Float32, queue_size=10)
        self.test_robot_yaw = rospy.Publisher('test/robot_yaw',
                                        Float32, queue_size=10)
        self.test_goal_yaw = rospy.Publisher('test/goal_yaw',
                                        Float32, queue_size=10)

        # Set parameters
        rate = rospy.get_param('~rate', 20.0)
        self.rate = rospy.Rate(rate)
        self.dT = 1 / rate

        self.kP = rospy.get_param('~kP', 1.0)
        self.kA = rospy.get_param('~kA', 6.0)
        self.kB = rospy.get_param('~kB', -0.8)
        self.controller.set_constants(self.kP, self.kA, self.kB)

        self.vel = 0

        # Set defualt parameters
        self.controller.set_max_linear_speed(
            rospy.get_param('~max_linear_speed', 1.1))
        self.controller.set_min_linear_speed(
            rospy.get_param('~min_linear_speed', 0.1))
        self.controller.set_max_angular_speed(
            rospy.get_param('~max_angular_speed', 2.0))
        self.controller.set_min_angular_speed(
            rospy.get_param('~min_angular_speed', 1.0))
        self.controller.set_max_linear_acceleration(
            rospy.get_param('~max_linear_acceleration', 1E9))
        self.controller.set_max_angular_acceleration(
            rospy.get_param('~max_angular_acceleration', 1E9))
        self.controller.set_linear_tolerance_outer(
            rospy.get_param('~linear_tolerance_outer', 0.3))
        self.controller.set_linear_tolerance_inner(
            rospy.get_param('~linear_tolerance_inner', 0.1))
        self.controller.set_angular_tolerance_outer(
            rospy.get_param('~angular_tolerance_outer', 0.2))
        self.controller.set_angular_tolerance_inner(
            rospy.get_param('~angular_tolerance_inner', 0.1))
        self.controller.set_ignore_angular_tolerance(
            rospy.get_param('~ignore_angular_tolerance', False))
        self.controller.set_forward_movement_only(
            rospy.get_param('~forwardMovementOnly', False))

        self.init_pose()
        self.goal = None

        self.action_server.start()
        rospy.spin()
    
    def on_turning(self, msg):
        self.turning = msg.data
    
    def on_turn_vel(self, msg):
        if self.turning:
            self.send_velocity(0, msg.data)
        else:
            pass


    def on_stop(self, msg):
        """ This resets the diff_drive controller if autonomous publishes to this topic """
        rospy.loginfo('Goal stopped')
        self.goal = None
        msg = Bool()
        msg.data = True
        self.goal_achieved_pub.publish(msg)
        self.goal_array = []
        self.goal_index = 1
        self.bool_array = []
        self.path_achieved_pub.publish(msg)

        # Makes sure that the robot does not remember and prev msgs (bug)
        self.send_velocity(0, 0)

    def on_execute(self, goal):
        """ Runs when new goal is given to the action server """
        self.goal = self.get_angle_pose(goal.pose.pose)
        rospy.loginfo('Goal: (%f,%f,%f)', self.goal.x, self.goal.y,
                      self.goal.theta)

        success = True
        while not rospy.is_shutdown() and self.goal is not None:
            print("In on_execute")
            # Allow client to preempt the goal.
            if self.action_server.is_preempt_requested():
                rospy.loginfo('Goal preempted')
                #self.send_velocity(0, 0)
                self.action_server.set_preempted()
                success = False
                break
            self.publish()
            self.rate.sleep()

        result = GoToPoseResult()
        result.success = success
        self.action_server.set_succeeded(result)
        
        # Sets a new goal
        # if (len(self.goal_array) >= 1 and self.goal is None):
        #     self.set_path_goal(self.goal_array[self.goal_index])

    def init_pose(self):
        """ Sets the initail pose before being updated """
        self.pose = pose.Pose()
        self.pose.x = 0
        self.pose.y = 0
        self.pose.theta = 0

    def publish(self):
        """ The main loop when following a path or goal """
        print("In publish loop")
        desired = self.controller.get_velocity(self.pose, self.vel)

        d = self.controller.get_goal_distance()
        self.dist_pub.publish(d)

        self.send_velocity(desired.xVel, desired.thetaVel)
        
        test = Float32()
        test.data = self.controller.test_alpha
        self.test_alpha.publish(test)
        test.data = self.controller.test_delta
        self.test_delta.publish(test)
        test.data = self.controller.test_theta_vel
        self.test_theta_vel.publish(test)
        test.data = self.controller.test_robot_yaw
        self.test_robot_yaw.publish(test)
        test.data = self.controller.test_goal_yaw
        self.test_goal_yaw.publish(test)

        if (len(self.goal_array) -1 == self.goal_index):
            last_goal = True
        else:
            last_goal = False

        # Forget the goal if achieved.
        if self.controller.at_goal():
            rospy.loginfo('Goal achieved')
            self.goal = None
            msg = Bool()
            msg.data = True
            # Has to be this that stops the path mid way
            self.path_achieved_pub.publish(msg)

            self.send_velocity(0,0)

    def send_velocity(self, xVel, thetaVel):
        """ Publishes the cmd vel topic """
        twist = Twist()
        twist.linear.x = xVel
        twist.angular.z = thetaVel
        self.twist_pub.publish(twist)

    def on_odometry(self, newPose):
        """ Updates the robot pose """
        self.pose = self.get_angle_pose(newPose.pose.pose)

    def on_velocity(self, newVel):
        self.vel = newVel.data

    def on_goal(self, goal):
        """ Waits for single goal from topic """
        self.action_client.wait_for_server()
        action_goal = GoToPoseGoal()
        action_goal.pose.pose = goal.pose
        self.action_client.send_goal(action_goal)
        msg = Bool()
        msg.data = False
        self.goal_achieved_pub.publish(msg)
        self.path_achieved_pub.publish(msg)

        # Resets the booleans for goal tolerances
        self.controller.reset_within_tolerance()
    
    def on_path(self, path):
        """ Creates a new path to be followed """

        print("Got on_path")
        # Strange how I see this usually print out... why did I include this?
        # Shouldnt be a problem it was actually a different print out I was seeing
        while (self.pose.x == 0 and self.pose.y == 0):
            print("Waiting for reset pose")

        # Creates path
        ax = []
        ay = []
        path_msg = Path()
        path_msg.header.frame_id = "map"
        poses = []
        for a in path.goals:
            pose = PoseStamped()
            pose.pose = a.pose
            poses.append(pose)

            ax.append(a.pose.position.x)
            ay.append(a.pose.position.y)

        path_msg.poses = poses
        self.path_pub.publish(path_msg)

        self.controller.set_path(self.pose, self.vel, ax = ax, ay = ay)

        # Changes parameters for each goal
        self.controller.set_constants(path.constants.kP, path.constants.kB, path.constants.kA)

        self.controller.set_max_linear_speed(path.linear.max_linear_speed)
        self.controller.set_min_linear_speed(path.linear.min_linear_speed)
        self.controller.set_max_angular_speed(path.angular.max_angular_speed)
        self.controller.set_min_angular_speed(path.angular.min_angular_speed)
        self.controller.set_max_linear_acceleration(path.linear.max_linear_acceleration)
        self.controller.set_max_angular_acceleration(path.angular.max_angular_acceleration)

        self.controller.set_linear_tolerance_outer(path.linear.linear_tolerance_outer)
        self.controller.set_linear_tolerance_inner(path.linear.linear_tolerance_inner)
        self.controller.set_angular_tolerance_outer(path.angular.angular_tolerance_outer)
        self.controller.set_angular_tolerance_inner(path.angular.angular_tolerance_inner)
        self.controller.set_ignore_angular_tolerance(path.angular.ignore_angular_tolerance)

        self.controller.set_forward_movement_only(path.forward_movement_only)
        self.controller.set_end_of_path_stop(path.end_of_path_stop)

        self.bool_array.append(False)
        
        bool_data = BoolArray()
        bool_data.bools = self.bool_array
        self.waypoints_achieved_pub.publish(bool_data)

        self.goal_array = [path.goals[len(path.goals) -1]]
        self.set_path_goal(self.goal_array[0])

    def set_path_goal(self, goal):
        """ This sets a new goal as part of a path """

        print("Got to set_path_goal")
        # Resets the booleans for goal tolerances
        self.controller.reset_within_tolerance()
        
        self.action_client.wait_for_server()
        action_goal = GoToPoseGoal()
        action_goal.pose.pose = goal.pose
        self.action_client.send_goal(action_goal)
        msg = Bool()
        msg.data = False
        self.goal_achieved_pub.publish(msg)
        self.path_achieved_pub.publish(msg)
        
    def get_angle_pose(self, quaternion_pose):
        """ Converts quat to euler """
        q = [quaternion_pose.orientation.x,
             quaternion_pose.orientation.y,
             quaternion_pose.orientation.z,
             quaternion_pose.orientation.w]
        roll, pitch, yaw = euler_from_quaternion(q)

        angle_pose = pose.Pose()
        angle_pose.x = quaternion_pose.position.x
        angle_pose.y = quaternion_pose.position.y
        angle_pose.theta = yaw
        return angle_pose

if __name__ == '__main__':
    try:
        node = GoToGoalNode()
        node.main()
    except rospy.ROSInterruptException:
        pass


